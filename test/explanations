************************* nodemon package explanation **********************

If you make a change to the server file, you will need to stop node from running and start it again in for it to reflect your changes.
There is a package called nodemon that provides the same functionality as node. The big difference is that it will recognize when you have made a code change and will automatically restart the server for you. 

************************* Mongoose library Explanation *****************************

 Mongoose is what's known as an ODM, Object Document Mapper. What it really means is that it's a way for us to write javascript inside of our javascript files like express files and that javascript code will interact with our database.
 It's basically a javascript layer on top of MongoDB and it adds some extra fancy things (special methods that makes it easier on us) in that.
 Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between objects in code and the representation of those objects in MongoDB.
 Object Mapping between Node and MongoDB managed via Mongoose



************************* Differece between <%= and <% in ejs *****************************

 you would notice that we have different forms of the brackets that are this <%= %>
 and this <% %> and the difference between these two is that when the = is added, 
 whatever is in the space is being returned to the HTML like our exampleVar or the 5 + 5 
 but when doing plain logic like in our if statement or loops we don’t want the 
 logic to be added to the HTML so we just wrap it up in the brackets without the = sign.


************************* Cluster concept in MongoDB *****************************


 A MongoDB cluster is several MongoDB servers working together.

There are two different distributed configurations of MongoDB. The first is a “replica set”, where several servers carry the exact same data, to protect against failure. The second is a “sharded cluster”, where several servers each carry only a fragment of the whole data, to achieve higher performance and carry larger data sets.

Historically, the word “cluster” was only used for sharded clusters, but more recently, the word cluster has come to mean both replica sets and sharded clusters. This is especially true for MongoDB Atlas, our company’s database-as-a-service offering. In Atlas, everything is called a cluster, whether it’s only a single replica set, or a sharded cluster.


************************* Express.js *****************************


Express.js is a light-weight web application framework for Node.js to help organize your web application into an MVC architecture on the server side. 
You can use a variety of choices for your templating language (like EJS, Jade, and Dust.js).

You can then use a database like MongoDB with Mongoose (for modeling) to provide a backend for your Node.js application. 
Express.js basically helps you manage everything, from routes, to handling requests and views.

What is the purpose of it with Node.js?
That you don't have to repeat same code over and over again. Node.js is a low-level I/O mechanism which has an HTTP module. If you just use an HTTP module, a lot of work like parsing the payload, cookies, storing sessions (in memory or in Redis), selecting the right route pattern based on regular expressions will have to be re-implemented. With Express.js, it is just there for you to use.

Conclusion:
1.Express.js is a modular web framework for Node.js
It is used for easier creation of web applications and services
Express.js simplifies development and makes it easier to write secure, modular and fast applications. You can do all that in plain old Node.js, but some bugs can (and will) surface, including security concerns (eg. not escaping a string properly)

************************* Ejs Vs. <script></script> tag *****************************

node.js programs and EJS don't run on the browser, usually it only run on the build process or on the server side.
ejs is a template language, which means it only controls how the page is rendered, and does nothing to change what happens to the page on the client's browser after it has loaded.
Means you have no access to the DOM. You can not use syntax that rely on the DOM like document, window, and any other DOM API.
The best way is to do it is on the script tag (JavaScript) which will be executed on the browser.
The message of console.log depends on the side (server side(using nodejs and ejs) or client side(using javascript), will be showed
in different places, the first case, in terminal, and the second case in console part of the browser.

