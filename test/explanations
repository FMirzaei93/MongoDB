------------------------- nodemon package explanation -------------------------

If you make a change to the server file, you will need to stop node from running and start it again in for it to reflect your changes.
There is a package called nodemon that provides the same functionality as node. The big difference is that it will recognize when you have made a code change and will automatically restart the server for you. 

------------------------- Mongoose library Explanation -------------------------

 Mongoose is what's known as an ODM, Object Document Mapper. What it really means is that it's a way for us to write javascript inside of our javascript files like express files and that javascript code will interact with our database.
 It's basically a javascript layer on top of MongoDB and it adds some extra fancy things (special methods that makes it easier on us) in that.
 Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It manages relationships between data, provides schema validation, and is used to translate between objects in code and the representation of those objects in MongoDB.
 Object Mapping between Node and MongoDB managed via Mongoose


------------------------- Differece between <%= and <% in ejs -------------------------

 you would notice that we have different forms of the brackets that are this <%= %>
 and this <% %> and the difference between these two is that when the = is added, 
 whatever is in the space is being returned to the HTML like our exampleVar or the 5 + 5 
 but when doing plain logic like in our if statement or loops we don’t want the 
 logic to be added to the HTML so we just wrap it up in the brackets without the = sign.


------------------------- Cluster concept in MongoDB -------------------------


 A MongoDB cluster is several MongoDB servers working together.

There are two different distributed configurations of MongoDB. The first is a “replica set”, where several servers carry the exact same data, to protect against failure. The second is a “sharded cluster”, where several servers each carry only a fragment of the whole data, to achieve higher performance and carry larger data sets.

Historically, the word “cluster” was only used for sharded clusters, but more recently, the word cluster has come to mean both replica sets and sharded clusters. This is especially true for MongoDB Atlas, our company’s database-as-a-service offering. In Atlas, everything is called a cluster, whether it’s only a single replica set, or a sharded cluster.


------------------------- Express.js -------------------------


Express.js is a light-weight web application framework for Node.js to help organize your web application into an MVC architecture on the server side. 
You can use a variety of choices for your templating language (like EJS, Jade, and Dust.js).

You can then use a database like MongoDB with Mongoose (for modeling) to provide a backend for your Node.js application. 
Express.js basically helps you manage everything, from routes, to handling requests and views.

What is the purpose of it with Node.js?
That you don't have to repeat same code over and over again. Node.js is a low-level I/O mechanism which has an HTTP module. If you just use an HTTP module, a lot of work like parsing the payload, cookies, storing sessions (in memory or in Redis), selecting the right route pattern based on regular expressions will have to be re-implemented. With Express.js, it is just there for you to use.

Conclusion:
1.Express.js is a modular web framework for Node.js
It is used for easier creation of web applications and services
Express.js simplifies development and makes it easier to write secure, modular and fast applications. You can do all that in plain old Node.js, but some bugs can (and will) surface, including security concerns (eg. not escaping a string properly)

------------------------- Ejs Vs. <script></script> tag -------------------------

node.js programs and EJS don't run on the browser, usually it only run on the build process or on the server side.
ejs is a template language, which means it only controls how the page is rendered, and does nothing to change what happens to the page on the client's browser after it has loaded.
Means you have no access to the DOM. You can not use syntax that rely on the DOM like document, window, and any other DOM API.
The best way is to do it is on the script tag (JavaScript) which will be executed on the browser.
The message of console.log depends on the side (server side(using nodejs and ejs) or client side(using javascript), will be showed
in different places, the first case, in terminal, and the second case in console part of the browser.


------------------------- Difference between script tag in Dom and having script url in the head section -------------------------


Elements on the page won’t render until all the script tags preceding them have loaded and executed. This means you can do all sorts of crazy things where you tweak the page before it loads.
This doesn’t apply however if you add script tags to the DOM after the page has begun to load using document.appendChild or the like. Those tags will load whenever the browser sees fit, and in no particular order.


------------------------- The Async & Defer Attributes -------------------------

async and defer are optional attributes for the HTML <script src="..."> tag that instruct the browser to download the indicated file in the background at a low priority without interrupting the process of rendering the page in the browser.

This makes the async and defer attributes a simple way to eliminate the render blocking effect of external JavaScript resources while also triggering the download as early as possible in the loading process by placing the <script> references in the <head> section:

HTML
<!-- other <head> stuff -->

<script async src="high-priority.js"></script>
<script defer src="general.js"></script>

</head>
The async and defer attributes only apply to external resources indicated with the src attribute. Inline <script>s are loaded as part of the HTML and always interrupt rendering to execute.



------------------------- Explanation Of Resource Hints -------------------------

Page source: https://pagespeedchecklist.com/resource-hints 

dns-prefetch
Similar to looking up an address on a map, when a user visits a website the browser begins the process of establishing a connection with the web server by finding the domain name on the internet. Although this usually takes only milliseconds, if a website loads files from a separate domain name - common for third-party resources - the browser makes a connection for each domain.

dns-prefetch tells the browser to start that process right away, rather than as the need is discovered later in the loading process, saving that time.

HTML
<link rel="dns-prefetch" href="https://example.com">




preconnect
Similar to dns-prefetch, preconnect goes further in the process of connecting to third-party domains and includes any needed security protocol, saving even more time.

HTML
<link rel="preconnect" href="https://example.com">
In most cases, preconnect is preferable to dns-prefetch but isn't supported by older web browsers. If desired, they can be used together, getting the benefit of preconnect in browsers that support it with a fallback to dns-prefetch:

HTML
<link rel="preconnect" href="https://example.com">
<link rel="dns-prefetch" href="https://example.com">
preload

While dns-prefetch and preconnect make the initial network connection, preload takes the process yet further and also downloads a specific file. This is ideal for resources that are important to the initial display of the page but not directly referenced in the HTML.

For example, images that appear in above the fold content but are indirectly called for in a CSS file (rather than directly in the HTML like an <img> tag) are perfect candidates for preload. Rather than waiting for the browser to analyze the HTML, download the CSS, analyze the CSS and then load the image referenced in the CSS, preload tells the browser to load the image right away.



Required Content Type
While dns-prefetch and preconnect only need the rel and href attributes, preload is a bit more complicated and adds the as attribute, which indicates the content type. Common as values include "image" for images, "style" for CSS, "script" for JavaScript and "font" for font files.

This example preloads a CSS background image file that's needed for above-the-fold content but isn't referenced directly in the HTML:

HTML
<link rel="preload" as="image" href="header-logo.svg">
Optional File Format

Like all <link> references, preload can also accept the type attribute to specify the MIME type of the file. For files that may not be supported by all browsers, the optional type attribute prevents browsers that don't support a particular file format from downloading it at all.

HTML
<link rel="preload" as="video" type="video/webm" href="intro-video.webm">
prefetch

While dns-prefetch, preconnect and preload speed up loading resources that are needed as soon as possible, prefetch is a lower priority version of preload that downloads files very likely be needed in the near future.

prefetch is typically used for files that will be needed on a page the user is likely to visit next.

This example triggers a low priority download of the CSS styling for a page frequently visited after the current page:

HTML
<link rel="prefetch" as="style" href="blog.css">
prerender

prerender works like prefetch, but loads an entire page and all of its dependent files in the background.

HTML
<link rel="prerender" href="blog.html">



------------------------- The Difference Between Async & Defer -------------------------

Source: https://pagespeedchecklist.com/async-and-defer


Any given resource on a page is first downloaded and then applied to or run on the page. While the loading behavior of async and defer are the same - loading in the background without render blocking - the difference lies in their behavior when executing.

JavaScript files with the async attribute will run in no particular order as soon as they're loaded, whereas defer'd resources run in sequence (in the order they appear in the HTML) toward the end of the initial loading process, right before the DOMContentLoaded event(DOMContentLoaded is equivalant to jQuery.ready).

The effect of the defer attribute is similar to placing a conventional <script> reference at the bottom of the HTML before the closing </body> tag. The advantage of defer is that <script>s can be placed in the <head> to be discovered and start loading sooner that resources found lower on the page.

Async
Downloads in the background at a low priority (same as defer)
"Can" interrupt page rendering to execute
Executes as soon as possible and in no particular order

Defer
Downloads in the background at a low priority (same as async)
Won't interrupt page rendering to execute
Executes in sequence just before the DOMContentLoaded event



When To Use Async
async is best for very high priority JavaScript resources that should run as early as possible in the loading process.

In the interest of page speed, async should be used with care and typically only for files upon which initial rendering of the page depends. async files also run in no particular order, so async is typically reserved for files that are completely independent and don't rely on other JavaScript resources to run first.


When To Use Defer
defer is ideal for general JavaScript resources that aren't critical to the initial rendering of the page and can be run later in the loading process.

defer is the best choice in most cases for optimal page speed and user experience. Particularly for slower mobile devices, defer allows the browser to display content to the user as quickly as possible by rendering the most critical HTML and CSS first and delaying JavaScript execution to a more appropriate stage in the loading timeline.